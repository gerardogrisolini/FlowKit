{"metadata":{"roleHeading":"Macro","modules":[{"name":"FlowKit"}],"externalID":"s:9FlowCasesAAyycfm","role":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FlowCases","kind":"identifier"},{"text":"()","kind":"text"}],"title":"FlowCases()","symbolKind":"macro"},"variants":[{"paths":["\/documentation\/flowkit\/flowcases()"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"A macro that creates named cases for an enum, CaseIterable implementation, function to update associated value."},{"type":"text","text":" "},{"type":"text","text":"For example,"}],"hierarchy":{"paths":[["doc:\/\/flowkit.FlowKit\/documentation\/FlowKit"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/flowkit.FlowKit\/documentation\/FlowKit\/FlowCases()"},"schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"declarations":[{"platforms":["iOS"],"languages":["swift"],"tokens":[{"text":"@attached","kind":"attribute"},{"text":"(member, names: arbitrary) ","kind":"text"},{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FlowCases"},{"kind":"text","text":"()"}]}],"kind":"declarations"},{"kind":"content","content":[{"text":"Overview","level":2,"type":"heading","anchor":"overview"},{"syntax":null,"code":["@FlowCases","enum Out: FlowOutProtocol {","    case empty2(InOutEmpty2)","    case empty3(InOutEmpty3)","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"generates to"}],"type":"paragraph"},{"code":["@FlowCases","enum Out: FlowOutProtocol {","    case empty2(InOutEmpty2)","    case empty3(InOutEmpty3)","    ","    static var allCases: [Out] {","        [.empty2(InOutEmpty2()), .empty3(InOutEmpty3())]","    }","","    func udpate(associatedValue: some InOutProtocol) -> Self {","        switch self {","        case .empty2(_):","            guard let model = associatedValue as? InOutEmpty2 else {","                return self","            }","            return .empty2(model)","        case .empty3(_):","            guard let model = associatedValue as? InOutEmpty3 else {","                return self","            }","            return .empty3(model)","        }","    }","","    static var empty2: (out: Self, model: InOutEmpty2) {","        (.empty2(InOutEmpty2()), InOutEmpty2())","    }","","    static var empty3: (out: Self, model: InOutEmpty3) {","        (.empty3(InOutEmpty3()), InOutEmpty3())","    }","}"],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"text":"If the enum is ","type":"text"},{"code":"public","type":"codeVoice"},{"text":", the generated ","type":"text"},{"type":"codeVoice","code":"ID"},{"type":"text","text":" enum and the"},{"type":"text","text":" "},{"type":"text","text":"generated "},{"code":"id","type":"codeVoice"},{"text":" accessor will also be ","type":"text"},{"code":"public","type":"codeVoice"}]}]}],"sections":[],"kind":"symbol","references":{"doc://flowkit.FlowKit/documentation/FlowKit/FlowCases()":{"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"FlowCases"},{"kind":"text","text":"()"}],"kind":"symbol","url":"\/documentation\/flowkit\/flowcases()","type":"topic","identifier":"doc:\/\/flowkit.FlowKit\/documentation\/FlowKit\/FlowCases()","role":"symbol","abstract":[{"type":"text","text":"A macro that creates named cases for an enum, CaseIterable implementation, function to update associated value."},{"text":" ","type":"text"},{"text":"For example,","type":"text"}],"title":"FlowCases()"},"doc://flowkit.FlowKit/documentation/FlowKit":{"kind":"symbol","identifier":"doc:\/\/flowkit.FlowKit\/documentation\/FlowKit","title":"FlowKit","abstract":[],"role":"collection","type":"topic","url":"\/documentation\/flowkit"}}}