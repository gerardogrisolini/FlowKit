{"abstract":[{"text":"A macro that creates named cases for an enum, CaseIterable implementation, function to update associated value.","type":"text"},{"text":" ","type":"text"},{"text":"For example,","type":"text"}],"hierarchy":{"paths":[["doc:\/\/flowkit.FlowKit\/documentation\/FlowKit"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"attribute","text":"@attached"},{"kind":"text","text":"(member, names: arbitrary) "},{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"FlowCases","kind":"identifier"},{"kind":"text","text":"()"}],"languages":["swift"],"platforms":["iOS"]}]},{"kind":"content","content":[{"level":2,"type":"heading","anchor":"overview","text":"Overview"},{"code":["@FlowCases","enum Out: FlowOutProtocol {","    case empty2(InOutEmpty2)","    case empty3(InOutEmpty3)","}"],"syntax":null,"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"generates to"}]},{"code":["@FlowCases","enum Out: FlowOutProtocol {","    case empty2(InOutEmpty2)","    case empty3(InOutEmpty3)","    ","    static var allCases: [Out] {","        [.empty2(InOutEmpty2()), .empty3(InOutEmpty3())]","    }","","    func udpate(associatedValue: some InOutProtocol) -> Self {","        switch self {","        case .empty2(_):","            guard let model = associatedValue as? InOutEmpty2 else {","                return self","            }","            return .empty2(model)","        case .empty3(_):","            guard let model = associatedValue as? InOutEmpty3 else {","                return self","            }","            return .empty3(model)","        }","    }","","    static var empty2: (out: Self, model: InOutEmpty2) {","        (.empty2(InOutEmpty2()), InOutEmpty2())","    }","","    static var empty3: (out: Self, model: InOutEmpty3) {","        (.empty3(InOutEmpty3()), InOutEmpty3())","    }","}"],"type":"codeListing","syntax":null},{"inlineContent":[{"text":"If the enum is ","type":"text"},{"code":"public","type":"codeVoice"},{"type":"text","text":", the generated "},{"type":"codeVoice","code":"ID"},{"text":" enum and the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"generated "},{"code":"id","type":"codeVoice"},{"text":" accessor will also be ","type":"text"},{"type":"codeVoice","code":"public"}],"type":"paragraph"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"symbol","identifier":{"url":"doc:\/\/flowkit.FlowKit\/documentation\/FlowKit\/FlowCases()","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/flowkit\/flowcases()"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"role":"symbol","symbolKind":"macro","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"FlowCases","kind":"identifier"},{"kind":"text","text":"()"}],"modules":[{"name":"FlowKit"}],"title":"FlowCases()","externalID":"s:9FlowCasesAAyycfm","roleHeading":"Macro"},"sections":[],"references":{"doc://flowkit.FlowKit/documentation/FlowKit/FlowCases()":{"url":"\/documentation\/flowkit\/flowcases()","abstract":[{"type":"text","text":"A macro that creates named cases for an enum, CaseIterable implementation, function to update associated value."},{"type":"text","text":" "},{"text":"For example,","type":"text"}],"type":"topic","identifier":"doc:\/\/flowkit.FlowKit\/documentation\/FlowKit\/FlowCases()","title":"FlowCases()","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FlowCases"},{"kind":"text","text":"()"}],"role":"symbol","kind":"symbol"},"doc://flowkit.FlowKit/documentation/FlowKit":{"url":"\/documentation\/flowkit","title":"FlowKit","role":"collection","abstract":[],"type":"topic","identifier":"doc:\/\/flowkit.FlowKit\/documentation\/FlowKit","kind":"symbol"}}}