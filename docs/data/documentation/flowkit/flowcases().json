{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/flowkit.FlowKit\/documentation\/FlowKit\/FlowCases()"},"schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"title":"FlowCases()","modules":[{"name":"FlowKit"}],"symbolKind":"macro","externalID":"s:9FlowCasesAAyycfm","role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"FlowCases","kind":"identifier"},{"text":"()","kind":"text"}],"roleHeading":"Macro"},"hierarchy":{"paths":[["doc:\/\/flowkit.FlowKit\/documentation\/FlowKit"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/flowkit\/flowcases()"]}],"abstract":[{"text":"A macro that creates named cases for an enum, CaseIterable implementation, function to update associated value.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example,"}],"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"attribute","text":"@attached"},{"text":"(member, names: arbitrary) ","kind":"text"},{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FlowCases"},{"text":"()","kind":"text"}],"platforms":["iOS"],"languages":["swift"]}]},{"kind":"content","content":[{"level":2,"text":"Overview","anchor":"overview","type":"heading"},{"type":"codeListing","code":["@FlowCases","enum Out: FlowOutProtocol {","    case empty2(InOutEmpty2)","    case empty3(InOutEmpty3)","}"],"syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"generates to"}]},{"syntax":null,"code":["@FlowCases","enum Out: FlowOutProtocol {","    case empty2(InOutEmpty2)","    case empty3(InOutEmpty3)","    ","    static var allCases: [Out] {","        [.empty2(InOutEmpty2()), .empty3(InOutEmpty3())]","    }","","    func udpate(associatedValue: some InOutProtocol) -> Self {","        switch self {","        case .empty2(_):","            guard let model = associatedValue as? InOutEmpty2 else {","                return self","            }","            return .empty2(model)","        case .empty3(_):","            guard let model = associatedValue as? InOutEmpty3 else {","                return self","            }","            return .empty3(model)","        }","    }","","    static var empty2: (out: Self, model: InOutEmpty2) {","        (.empty2(InOutEmpty2()), InOutEmpty2())","    }","","    static var empty3: (out: Self, model: InOutEmpty3) {","        (.empty3(InOutEmpty3()), InOutEmpty3())","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"If the enum is ","type":"text"},{"code":"public","type":"codeVoice"},{"type":"text","text":", the generated "},{"type":"codeVoice","code":"ID"},{"type":"text","text":" enum and the"},{"type":"text","text":" "},{"type":"text","text":"generated "},{"type":"codeVoice","code":"id"},{"text":" accessor will also be ","type":"text"},{"code":"public","type":"codeVoice"}]}]}],"kind":"symbol","references":{"doc://flowkit.FlowKit/documentation/FlowKit/FlowCases()":{"identifier":"doc:\/\/flowkit.FlowKit\/documentation\/FlowKit\/FlowCases()","role":"symbol","title":"FlowCases()","type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"text":"FlowCases","kind":"identifier"},{"kind":"text","text":"()"}],"url":"\/documentation\/flowkit\/flowcases()","abstract":[{"text":"A macro that creates named cases for an enum, CaseIterable implementation, function to update associated value.","type":"text"},{"type":"text","text":" "},{"text":"For example,","type":"text"}],"kind":"symbol"},"doc://flowkit.FlowKit/documentation/FlowKit":{"url":"\/documentation\/flowkit","identifier":"doc:\/\/flowkit.FlowKit\/documentation\/FlowKit","title":"FlowKit","kind":"symbol","role":"collection","abstract":[],"type":"topic"}}}