{"abstract":[{"text":"A macro that creates named cases for an enum, CaseIterable implementation, function to update associated value.","type":"text"},{"type":"text","text":" "},{"text":"For example,","type":"text"}],"variants":[{"paths":["\/documentation\/flowkit\/flowcases()"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/flowkit.FlowKit\/documentation\/FlowKit"]]},"kind":"symbol","schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"symbolKind":"macro","externalID":"s:9FlowCasesAAyycfm","title":"FlowCases()","role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"FlowCases","kind":"identifier"},{"text":"()","kind":"text"}],"modules":[{"name":"FlowKit"}],"roleHeading":"Macro"},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"attribute","text":"@attached"},{"kind":"text","text":"(member, names: arbitrary) "},{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"FlowCases","kind":"identifier"},{"kind":"text","text":"()"}],"platforms":["iOS"]}]},{"kind":"content","content":[{"level":2,"text":"Overview","type":"heading","anchor":"overview"},{"type":"codeListing","syntax":null,"code":["@FlowCases","enum Out: FlowOutProtocol {","    case empty2(InOutEmpty2)","    case empty3(InOutEmpty3)","}"]},{"type":"paragraph","inlineContent":[{"text":"generates to","type":"text"}]},{"code":["@FlowCases","enum Out: FlowOutProtocol {","    case empty2(InOutEmpty2)","    case empty3(InOutEmpty3)","    ","    static var allCases: [Out] {","        [.empty2(InOutEmpty2()), .empty3(InOutEmpty3())]","    }","","    func udpate(associatedValue: some InOutProtocol) -> Self {","        switch self {","        case .empty2(_):","            guard let model = associatedValue as? InOutEmpty2 else {","                return self","            }","            return .empty2(model)","        case .empty3(_):","            guard let model = associatedValue as? InOutEmpty3 else {","                return self","            }","            return .empty3(model)","        }","    }","","    static var empty2: (out: Self, model: InOutEmpty2) {","        (.empty2(InOutEmpty2()), InOutEmpty2())","    }","","    static var empty3: (out: Self, model: InOutEmpty3) {","        (.empty3(InOutEmpty3()), InOutEmpty3())","    }","}"],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"text":"If the enum is ","type":"text"},{"code":"public","type":"codeVoice"},{"type":"text","text":", the generated "},{"type":"codeVoice","code":"ID"},{"text":" enum and the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"generated "},{"type":"codeVoice","code":"id"},{"text":" accessor will also be ","type":"text"},{"code":"public","type":"codeVoice"}]}]}],"sections":[],"identifier":{"url":"doc:\/\/flowkit.FlowKit\/documentation\/FlowKit\/FlowCases()","interfaceLanguage":"swift"},"references":{"doc://flowkit.FlowKit/documentation/FlowKit":{"type":"topic","kind":"symbol","identifier":"doc:\/\/flowkit.FlowKit\/documentation\/FlowKit","title":"FlowKit","role":"collection","abstract":[],"url":"\/documentation\/flowkit"},"doc://flowkit.FlowKit/documentation/FlowKit/FlowCases()":{"title":"FlowCases()","type":"topic","url":"\/documentation\/flowkit\/flowcases()","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FlowCases"},{"text":"()","kind":"text"}],"abstract":[{"type":"text","text":"A macro that creates named cases for an enum, CaseIterable implementation, function to update associated value."},{"type":"text","text":" "},{"type":"text","text":"For example,"}],"identifier":"doc:\/\/flowkit.FlowKit\/documentation\/FlowKit\/FlowCases()","role":"symbol","kind":"symbol"}}}