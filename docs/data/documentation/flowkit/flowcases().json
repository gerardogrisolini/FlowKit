{"metadata":{"role":"symbol","externalID":"s:9FlowCasesAAyycfm","fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"FlowCases"},{"kind":"text","text":"()"}],"modules":[{"name":"FlowKit"}],"roleHeading":"Macro","symbolKind":"macro","title":"FlowCases()"},"abstract":[{"type":"text","text":"A macro that creates named cases for an enum, CaseIterable implementation, function to update associated value."},{"text":" ","type":"text"},{"text":"For example,","type":"text"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/flowkit.FlowKit\/documentation\/FlowKit"]]},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/flowkit.FlowKit\/documentation\/FlowKit\/FlowCases()"},"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"attribute","text":"@attached"},{"kind":"text","text":"(member, names: arbitrary) "},{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"FlowCases","kind":"identifier"},{"text":"()","kind":"text"}],"platforms":["iOS"],"languages":["swift"]}],"kind":"declarations"},{"content":[{"text":"Overview","anchor":"overview","level":2,"type":"heading"},{"type":"codeListing","code":["@FlowCases","enum Out: FlowOutProtocol {","    case empty2(InOutEmpty2)","    case empty3(InOutEmpty3)","}"],"syntax":null},{"type":"paragraph","inlineContent":[{"text":"generates to","type":"text"}]},{"type":"codeListing","syntax":null,"code":["@FlowCases","enum Out: FlowOutProtocol {","    case empty2(InOutEmpty2)","    case empty3(InOutEmpty3)","    ","    static var allCases: [Out] {","        [.empty2(InOutEmpty2()), .empty3(InOutEmpty3())]","    }","","    func udpate(associatedValue: some InOutProtocol) -> Self {","        switch self {","        case .empty2(_):","            guard let model = associatedValue as? InOutEmpty2 else {","                return self","            }","            return .empty2(model)","        case .empty3(_):","            guard let model = associatedValue as? InOutEmpty3 else {","                return self","            }","            return .empty3(model)","        }","    }","","    static var empty2: (out: Self, model: InOutEmpty2) {","        (.empty2(InOutEmpty2()), InOutEmpty2())","    }","","    static var empty3: (out: Self, model: InOutEmpty3) {","        (.empty3(InOutEmpty3()), InOutEmpty3())","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"If the enum is ","type":"text"},{"type":"codeVoice","code":"public"},{"type":"text","text":", the generated "},{"code":"ID","type":"codeVoice"},{"type":"text","text":" enum and the"},{"type":"text","text":" "},{"text":"generated ","type":"text"},{"type":"codeVoice","code":"id"},{"text":" accessor will also be ","type":"text"},{"type":"codeVoice","code":"public"}]}],"kind":"content"}],"variants":[{"paths":["\/documentation\/flowkit\/flowcases()"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://flowkit.FlowKit/documentation/FlowKit/FlowCases()":{"role":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FlowCases","kind":"identifier"},{"text":"()","kind":"text"}],"abstract":[{"text":"A macro that creates named cases for an enum, CaseIterable implementation, function to update associated value.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example,"}],"kind":"symbol","url":"\/documentation\/flowkit\/flowcases()","type":"topic","identifier":"doc:\/\/flowkit.FlowKit\/documentation\/FlowKit\/FlowCases()","title":"FlowCases()"},"doc://flowkit.FlowKit/documentation/FlowKit":{"abstract":[],"kind":"symbol","url":"\/documentation\/flowkit","title":"FlowKit","identifier":"doc:\/\/flowkit.FlowKit\/documentation\/FlowKit","type":"topic","role":"collection"}}}