{"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["iOS"],"tokens":[{"text":"@attached","kind":"attribute"},{"kind":"text","text":"(member, names: arbitrary) "},{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FlowCases"},{"text":"()","kind":"text"}]}]},{"content":[{"text":"Overview","type":"heading","anchor":"overview","level":2},{"code":["@FlowCases","enum Out: FlowOutProtocol {","    case empty2(InOutEmpty2)","    case empty3(InOutEmpty3)","}"],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"text":"generates to","type":"text"}]},{"syntax":null,"code":["@FlowCases","enum Out: FlowOutProtocol {","    case empty2(InOutEmpty2)","    case empty3(InOutEmpty3)","    ","    static var allCases: [Out] {","        [.empty2(InOutEmpty2()), .empty3(InOutEmpty3())]","    }","","    func udpate(associatedValue: some InOutProtocol) -> Self {","        switch self {","        case .empty2(_):","            guard let model = associatedValue as? InOutEmpty2 else {","                return self","            }","            return .empty2(model)","        case .empty3(_):","            guard let model = associatedValue as? InOutEmpty3 else {","                return self","            }","            return .empty3(model)","        }","    }","","    static var empty2: (out: Self, model: InOutEmpty2) {","        (.empty2(InOutEmpty2()), InOutEmpty2())","    }","","    static var empty3: (out: Self, model: InOutEmpty3) {","        (.empty3(InOutEmpty3()), InOutEmpty3())","    }","}"],"type":"codeListing"},{"inlineContent":[{"text":"If the enum is ","type":"text"},{"code":"public","type":"codeVoice"},{"text":", the generated ","type":"text"},{"type":"codeVoice","code":"ID"},{"text":" enum and the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"generated "},{"type":"codeVoice","code":"id"},{"text":" accessor will also be ","type":"text"},{"type":"codeVoice","code":"public"}],"type":"paragraph"}],"kind":"content"}],"metadata":{"title":"FlowCases()","modules":[{"name":"FlowKit"}],"symbolKind":"macro","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FlowCases"},{"text":"()","kind":"text"}],"role":"symbol","roleHeading":"Macro","externalID":"s:9FlowCasesAAyycfm"},"schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"type":"text","text":"A macro that creates named cases for an enum, CaseIterable implementation, function to update associated value."},{"text":" ","type":"text"},{"type":"text","text":"For example,"}],"hierarchy":{"paths":[["doc:\/\/flowkit.FlowKit\/documentation\/FlowKit"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/flowkit\/flowcases()"]}],"kind":"symbol","identifier":{"url":"doc:\/\/flowkit.FlowKit\/documentation\/FlowKit\/FlowCases()","interfaceLanguage":"swift"},"sections":[],"references":{"doc://flowkit.FlowKit/documentation/FlowKit/FlowCases()":{"url":"\/documentation\/flowkit\/flowcases()","type":"topic","role":"symbol","kind":"symbol","abstract":[{"text":"A macro that creates named cases for an enum, CaseIterable implementation, function to update associated value.","type":"text"},{"text":" ","type":"text"},{"text":"For example,","type":"text"}],"fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"FlowCases","kind":"identifier"},{"kind":"text","text":"()"}],"identifier":"doc:\/\/flowkit.FlowKit\/documentation\/FlowKit\/FlowCases()","title":"FlowCases()"},"doc://flowkit.FlowKit/documentation/FlowKit":{"url":"\/documentation\/flowkit","role":"collection","abstract":[],"title":"FlowKit","kind":"symbol","identifier":"doc:\/\/flowkit.FlowKit\/documentation\/FlowKit","type":"topic"}}}