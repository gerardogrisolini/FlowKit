{"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"role":"symbol","externalID":"s:9FlowCasesAAyycfm","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FlowCases"},{"text":"()","kind":"text"}],"roleHeading":"Macro","title":"FlowCases()","modules":[{"name":"FlowKit"}],"symbolKind":"macro"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/flowkit.FlowKit\/documentation\/FlowKit\/FlowCases()"},"abstract":[{"type":"text","text":"A macro that creates named cases for an enum, CaseIterable implementation, function to update associated value."},{"type":"text","text":" "},{"type":"text","text":"For example,"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/flowkit\/flowcases()"]}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/flowkit.FlowKit\/documentation\/FlowKit"]]},"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"@attached","kind":"attribute"},{"text":"(member, names: arbitrary) ","kind":"text"},{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FlowCases"},{"kind":"text","text":"()"}],"platforms":["iOS"]}]},{"content":[{"level":2,"anchor":"overview","type":"heading","text":"Overview"},{"code":["@FlowCases","enum Out: FlowOutProtocol {","    case empty2(InOutEmpty2)","    case empty3(InOutEmpty3)","}"],"type":"codeListing","syntax":null},{"inlineContent":[{"text":"generates to","type":"text"}],"type":"paragraph"},{"syntax":null,"code":["@FlowCases","enum Out: FlowOutProtocol {","    case empty2(InOutEmpty2)","    case empty3(InOutEmpty3)","    ","    static var allCases: [Out] {","        [.empty2(InOutEmpty2()), .empty3(InOutEmpty3())]","    }","","    func udpate(associatedValue: some InOutProtocol) -> Self {","        switch self {","        case .empty2(_):","            guard let model = associatedValue as? InOutEmpty2 else {","                return self","            }","            return .empty2(model)","        case .empty3(_):","            guard let model = associatedValue as? InOutEmpty3 else {","                return self","            }","            return .empty3(model)","        }","    }","","    static var empty2: (out: Self, model: InOutEmpty2) {","        (.empty2(InOutEmpty2()), InOutEmpty2())","    }","","    static var empty3: (out: Self, model: InOutEmpty3) {","        (.empty3(InOutEmpty3()), InOutEmpty3())","    }","}"],"type":"codeListing"},{"inlineContent":[{"text":"If the enum is ","type":"text"},{"type":"codeVoice","code":"public"},{"type":"text","text":", the generated "},{"type":"codeVoice","code":"ID"},{"type":"text","text":" enum and the"},{"text":" ","type":"text"},{"type":"text","text":"generated "},{"code":"id","type":"codeVoice"},{"type":"text","text":" accessor will also be "},{"type":"codeVoice","code":"public"}],"type":"paragraph"}],"kind":"content"}],"references":{"doc://flowkit.FlowKit/documentation/FlowKit/FlowCases()":{"role":"symbol","url":"\/documentation\/flowkit\/flowcases()","kind":"symbol","abstract":[{"type":"text","text":"A macro that creates named cases for an enum, CaseIterable implementation, function to update associated value."},{"type":"text","text":" "},{"text":"For example,","type":"text"}],"title":"FlowCases()","type":"topic","identifier":"doc:\/\/flowkit.FlowKit\/documentation\/FlowKit\/FlowCases()","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FlowCases","kind":"identifier"},{"text":"()","kind":"text"}]},"doc://flowkit.FlowKit/documentation/FlowKit":{"url":"\/documentation\/flowkit","role":"collection","identifier":"doc:\/\/flowkit.FlowKit\/documentation\/FlowKit","abstract":[],"type":"topic","kind":"symbol","title":"FlowKit"}}}